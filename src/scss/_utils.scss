@use 'sass:string';
@use './vars' as *;

@mixin hidden {
  block-size: 1px;
  border: 0;
  clip-path: inset(100%);
  inline-size: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  visibility: inherit;
  white-space: nowrap;
}

@mixin warning-icon-before {
  border-bottom: 1.25rem solid #d6d141;
  border-left: 0.75rem solid transparent;
  border-right: 0.75rem solid transparent;
  content: '';
  height: 0;
  position: absolute;
  right: 14px;
  top: 45px;
  width: 0;
}

@mixin warning-icon-after {
  color: $pure-black;
  content: '!';
  font-family: arial, sans-serif;
  font-size: 0.85rem;
  height: 2rem;
  line-height: 1;
  position: absolute;
  right: 10px;
  text-align: center;
  top: 50px;
  width: 2rem;
}

@mixin gridMargins {
  margin: 0 $spacing-md;

  @media (min-width: $breakpoint-lg) {
    margin: 0 $spacing-lg;
  }

  @media (min-width: $breakpoint-xl) {
    margin: 0 $spacing-xl;
  }
}

@mixin grid($columns: 2, $margins-on: true) {
  display: grid;
  gap: $spacing-md;
  grid-template-columns: repeat($columns, 1fr);
  row-gap: $spacing-lg;

  @if $margins-on {
    @include gridMargins;
  }
}

@mixin gridContainer($margins-on: true) {
  display: grid;
  gap: $spacing-md;
  grid-template-columns: repeat(2, 1fr);
  row-gap: $spacing-lg;

  @media (min-width: $breakpoint-md) {
    grid-template-columns: repeat(6, 1fr);
  }

  @media (min-width: $breakpoint-lg) {
    grid-template-columns: repeat(12, 1fr);
  }

  @if $margins-on {
    @include gridMargins;
  }
}

@mixin media($breakpoint, $type: 'min') {
  @if $breakpoint == $size-sm {
    // $breakpoint-sm: 360px;
    @if $type == 'min' {
      @media (min-width: $breakpoint-sm) {
        @content;
      }
    }

    @if $type == 'max' {
      @media (max-width: calc($breakpoint-sm - 1px)) {
        @content;
      }
    }
  }

  @if $breakpoint == $size-md {
    // $breakpoint-md: 961px;
    @if $type == 'min' {
      @media (min-width: $breakpoint-md) {
        @content;
      }
    }

    @if $type == 'max' {
      @media (max-width: calc($breakpoint-md - 1px)) {
        @content;
      }
    }
  }

  @if $breakpoint == $size-lg {
    // $breakpoint-lg: 1401px;

    @if $type == 'min' {
      @media (min-width: $breakpoint-lg) {
        @content;
      }
    }

    @if type == 'max' {
      @media (max-width: calc($breakpoint-lg - 1px)) {
        @content;
      }
    }
  }

  @if $breakpoint == $size-xl {
    // $breakpoint-xl: 1801px;
    @if type == 'min' {
      @media (min-width: $breakpoint-xl) {
        @content;
      }
    }

    @if type == 'max' {
      @media (max-width: calc($breakpoint-xl - 1px)) {
        @content;
      }
    }
  }
}

// prepends the parent class name to the child class name for BEM
@mixin padding($padding: $padding-lg, $direction: 'all', $side: 'both') {
  $parsed-padding: string.slice(#{$padding}, 15, -2); // Parse the padding value by removing "-var(--spacing-" and ")".

  .#{$px}-padding-#{$direction}-#{$parsed-padding}-#{$side} {
    // Use the parsed padding value.
    @if $direction == 'all' {
      @if $side == 'both' {
        padding: $padding;
      }
    }

    @if $direction == 'vertical' {
      @if $side == 'start' or $side == 'both' {
        padding-top: $padding;
      }

      @if $side == 'end' or $side == 'both' {
        padding-bottom: $padding;
      }
    }

    @if $direction == 'horizontal' {
      @if $side == 'start' or $side == 'both' {
        padding-left: $padding;
      }

      @if $side == 'end' or $side == 'both' {
        padding-right: $padding;
      }
    }
  }
}

@mixin isHeaderMobile() {
  @media (max-width: #{$breakpoint-md - 1}) {
    @content;
  }
}

@mixin isHeaderDesktop() {
  @media (min-width: $breakpoint-md) {
    @content;
  }
}
