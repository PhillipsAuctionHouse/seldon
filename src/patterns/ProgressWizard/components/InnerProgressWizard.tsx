import { Children, Dispatch, forwardRef, SetStateAction, type ReactNode } from 'react';
import ProgressIndicator from '../../../components/ProgressIndicator/ProgressIndicator';
import { getCommonProps } from '../../../utils';
import Icon from '../../../components/Icon/Icon';
import { Footer } from './ProgressWizardFooter';

import { type ButtonLabels, CallbackProps, LoadingState } from '../types';

/**
 * Props for the internal ProgressWizard layout component. Used to render the wizard UI and handle navigation.
 * @property steps - Array of FormStep objects (wizard steps)
 * @property currentStepIndex - Index of the current step (0-based)
 * @property setCurrentStepIndex - Setter for current step index
 * @property customHeader - Optional custom header ReactNode
 * @property hideNavigation - If true, hides the default footer navigation (so you can implement your own)
 * @property buttonLabels - Button labels for navigation (see type ButtonLabels)
 * @property loadingState - Current loading state (see type LoadingState, aligns with a remix fetcher)
 * @property setLoadingState - Setter for loading state
 * @property action - Optional form action URL, irrelevant if `onFormSubmit` is supplied to the parent component.
 * @property isFirstStep - True if this is the first step
 * @property isLastStep - True if this is the last step
 * @property className - Optional class for styling
 * @private formId - ID for the form element, generated by the parent
 *
 * Inherits handler props from Handlers.
 */

export interface InnerProgressWizardProps extends CallbackProps, ButtonLabels {
  currentStepIndex: number;
  setCurrentStepIndex: Dispatch<SetStateAction<number>>;
  loadingState?: LoadingState;
  customHeader?: ReactNode;
  hideNavigation?: boolean;
  hideProgressIndicator?: boolean;
  childOrChildren: ReturnType<typeof Children.toArray>;
}

/**
 * Internal layout component for ProgressWizard. Renders the wizard UI, progress indicator, step content, and footer.
 *
 * This component is used internally by ProgressWizard and should not be used directly by consumers.
 *
 * @param props - InnerProgressWizardProps
 * @returns ReactElement with wizard layout
 */
const InnerProgressWizard = forwardRef<HTMLDivElement, InnerProgressWizardProps>((props, ref) => {
  const {
    currentStepIndex,
    setCurrentStepIndex,
    customHeader,
    hideNavigation,
    hideProgressIndicator,
    startLabel = 'Start',
    cancelLabel = 'Cancel',
    backLabel = 'Back',
    continueLabel = 'Continue',
    submitLabel = 'Submit',
    loadingState,

    onContinue,
    onBack,
    onFormSubmit,
    onCancel,

    childOrChildren,
    ...rest
  } = props;

  const { className: baseClassName, ...commonProps } = getCommonProps(rest, 'ProgressWizard');

  const isFirstStep = currentStepIndex === 0;
  const isLastStep = currentStepIndex === childOrChildren.length - 1;

  return (
    <section {...commonProps} className={baseClassName} ref={ref} aria-label="Form Wizard">
      <div className={`${baseClassName}__logo`}>
        <Icon icon="PhillipsLogo" height={32} width={120} />
      </div>
      {customHeader}
      {!hideProgressIndicator ? (
        <nav aria-label="Progress">
          <ProgressIndicator
            totalSteps={childOrChildren.length}
            currentStep={currentStepIndex + 1}
            labels={childOrChildren.map(
              (child, i) =>
                (typeof child === 'object' && 'props' in child && child.props['aria-label']) || `Step ${i + 1}`,
            )}
            progressIndicatorAriaLabel="Wizard Progress"
          />
        </nav>
      ) : null}

      <div className={`${baseClassName}__content`} aria-labelledby={`wizard-step-label-${currentStepIndex}`}>
        {childOrChildren ?? <p>No content found for step {currentStepIndex + 1}</p>}
      </div>
      {!hideNavigation ? (
        <div className={`${baseClassName}__footer`}>
          <Footer
            isFirstStep={isFirstStep}
            isLastStep={isLastStep}
            baseClassName={baseClassName}
            isCanContinue={true}
            isLoading={loadingState === 'submitting' || loadingState === 'loading'}
            labels={{
              startLabel,
              cancelLabel,
              backLabel,
              continueLabel,
              submitLabel,
            }}
            onContinue={onContinue}
            onBack={onBack}
            onCancel={onCancel}
            onFormSubmit={onFormSubmit}
          />
        </div>
      ) : null}
    </section>
  );
});

InnerProgressWizard.displayName = 'InnerProgressWizard';
export default InnerProgressWizard;
