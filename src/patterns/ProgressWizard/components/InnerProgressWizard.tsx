import { cloneElement, forwardRef, useEffect, useMemo, type ReactNode } from 'react';
import ProgressIndicator from '../../../components/ProgressIndicator/ProgressIndicator';
import { getCommonProps } from '../../../utils';
import classNames from 'classnames';
import Icon from '../../../components/Icon/Icon';
import { useFormContext } from 'react-hook-form';
import { Footer } from './ProgressWizardFooter';

import { type PublicState, type FormStep, type ButtonLabels, type Handlers } from '../types';
import { handleHiddenFields } from '../utils';
import { useProgressWizardForm } from '../hooks/useProgressWizardForm';

/**
 * Props for the internal ProgressWizard layout component. Used to render the wizard UI and handle navigation.
 * @property steps - Array of FormStep objects (wizard steps)
 * @property currentStepIndex - Index of the current step (0-based)
 * @property setCurrentStepIndex - Setter for current step index
 * @property customHeader - Optional custom header ReactNode
 * @property hideNavigation - If true, hides the default footer navigation (so you can implement your own)
 * @property buttonLabels - Button labels for navigation (see type ButtonLabels)
 * @property loadingState - Current loading state (see type LoadingState, aligns with a remix fetcher)
 * @property setLoadingState - Setter for loading state
 * @property action - Optional form action URL, irrelevant if `onSubmit` is supplied to the parent component.
 * @property isFirstStep - True if this is the first step
 * @property isLastStep - True if this is the last step
 * @property className - Optional class for styling
 * @private formId - ID for the form element, generated by the parent
 *
 * Inherits handler props from Handlers.
 */
type InnerProgressWizardProps = Required<Handlers> &
  PublicState & {
    steps: FormStep[];
    customHeader?: ReactNode;
    hideNavigation?: boolean;
    hideProgressIndicator?: boolean;
    buttonLabels: ButtonLabels;
    action?: string;
    isFirstStep: boolean;
    isLastStep: boolean;
    className?: string;
    formId: string;
  };

/**
 * Internal layout component for ProgressWizard. Renders the wizard UI, progress indicator, step content, and footer.
 *
 * This component is used internally by ProgressWizard and should not be used directly by consumers.
 *
 * @param props - InnerProgressWizardProps
 * @returns ReactElement with wizard layout
 */
const InnerProgressWizard = forwardRef<HTMLDivElement, InnerProgressWizardProps>((props, ref) => {
  const {
    steps,
    currentStepIndex,
    setCurrentStepIndex,
    customHeader,
    hideNavigation,
    hideProgressIndicator,
    buttonLabels,
    loadingState,
    setLoadingState,
    action,
    isFirstStep,
    isLastStep,

    handleContinue,
    handleBack,
    handleSubmit,
    handleCancel,

    className,
    formId,

    ...rest
  } = props;

  const { className: baseClassName, ...commonProps } = getCommonProps(rest, 'ProgressWizard');
  const currentStep = steps[currentStepIndex] ?? {
    id: '0',
    label: '',
    componentFactory: () => <span>No step found at index {currentStepIndex}</span>,
  };
  const formMethods = useFormContext();

  useEffect(() => {
    if (currentStep && currentStep.hiddenFields) {
      handleHiddenFields(Object.keys(formMethods.getValues()), currentStep.hiddenFields);
    }
  }, [currentStep, formMethods]);

  const { registerProgressWizardInput } = useProgressWizardForm();
  const currentStepComponent = useMemo(
    () =>
      cloneElement(
        currentStep?.componentFactory({
          ...formMethods,
          registerProgressWizardInput: (fieldName, options) =>
            registerProgressWizardInput(fieldName, options, currentStep.id),
          currentStepIndex,
          setCurrentStepIndex,
          loadingState,
          setLoadingState,
        }),
        {
          key: currentStep.id,
        },
      ),
    [
      currentStep,
      currentStepIndex,
      formMethods,
      loadingState,
      registerProgressWizardInput,
      setCurrentStepIndex,
      setLoadingState,
    ],
  );

  return (
    <section {...commonProps} className={classNames(baseClassName, className)} ref={ref} aria-label="Form Wizard">
      <div className={`${baseClassName}__logo`}>
        <Icon icon="PhillipsLogo" height={32} width={120} />
      </div>
      {customHeader}
      <nav aria-label="Progress">
        {!hideProgressIndicator ? (
          <ProgressIndicator
            totalSteps={steps.length}
            currentStep={currentStepIndex + 1}
            labels={steps.map((s) => s.label)}
            progressIndicatorAriaLabel="Wizard Progress"
          />
        ) : null}
      </nav>
      <form
        id={formId}
        action={action}
        onSubmit={(e) => {
          e.preventDefault();
          !isLastStep ? handleContinue() : handleSubmit();
        }}
      >
        <div className={`${baseClassName}__content`} aria-labelledby={`wizard-step-label-${currentStep.id}`}>
          {currentStepComponent}
        </div>
        {!hideNavigation ? (
          <div className={`${baseClassName}__footer`}>
            <Footer
              isFirstStep={isFirstStep}
              isLastStep={isLastStep}
              baseClassName={baseClassName}
              isCanContinue={true}
              isLoading={loadingState === 'submitting' || loadingState === 'loading'}
              labels={buttonLabels}
              handleContinue={handleContinue}
              handleBack={handleBack}
              handleCancel={handleCancel}
            />
          </div>
        ) : null}
      </form>
    </section>
  );
});

InnerProgressWizard.displayName = 'InnerProgressWizard';
export default InnerProgressWizard;
